import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';
import { Country } from 'src/app/core/models/country.interface';
import { Chart } from 'chart.js';

@Injectable({
  providedIn: 'root',
})
export class OlympicDataService {
  private olympicUrl = './assets/mock/olympic.json';
  private olympics$ = new BehaviorSubject<Country[] | null>(null);

  constructor(private http: HttpClient) {}

  /**
   * Charge les donn√©es initiales des Jeux Olympiques.
   * Met √† jour le BehaviorSubject `olympics$` avec les donn√©es charg√©es.
   * 
   * @returns Un `Observable` contenant la liste des pays participants.
   */
  loadInitialData(): Observable<Country[]> {
    return this.http.get<Country[]>(this.olympicUrl).pipe(
      tap((data) => this.olympics$.next(data)),
      catchError((error) => {
        console.error('Erreur de chargement des donn√©es', error);
        this.olympics$.next(null);
        throw error;
      })
    );
  }

  /**
   * Obtient les donn√©es olympiques sous forme d'Observable.
   * 
   * @returns Un `Observable` contenant un tableau de `Country` ou `null` si non charg√©.
   */
  getOlympics(): Observable<Country[] | null> {
    return this.olympics$.asObservable();
  }

  /**
   * Obtient les donn√©es d'un pays sp√©cifique.
   * 
   * @param countryName - Nom du pays recherch√©.
   * @returns Un `Observable` contenant l'objet `Country` ou `undefined` si non trouv√©.
   */
  getCountryData(countryName: string): Observable<Country | undefined> {
    return this.getOlympics().pipe(
      map((data) => data?.find((country) => country.country === countryName))
    );
  }

  /**
   * Pr√©pare les donn√©es pour l'affichage d'un graphique global des m√©dailles.
   * 
   * @param countries - Liste des pays avec leurs participations.
   * @returns Un tableau d'objets contenant `name`, `value` (m√©dailles) et `tooltip`.
   */
  prepareChartData(countries: Country[]): { name: string; value: number; tooltip: string }[] {
    return countries.map((country: Country) => {
      const totalMedals = country.participations.reduce((total, participation) => total + participation.medalsCount, 0);
      return {
        name: country.country,
        value: totalMedals,
        tooltip: `${country.country}: üèÖ ${totalMedals} m√©dailles`,
      };
    });
  }

  /**
   * Calcule les statistiques g√©n√©rales des Jeux Olympiques.
   * 
   * @param countries - Liste des pays participants.
   * @returns Un objet contenant `totalMedals`, `totalCountries` et `totalJOs` (nombre de JO).
   */
  calculateStatistics(countries: Country[]): { totalMedals: number; totalCountries: number; totalJOs: number } {
    const totalMedals = countries.reduce((sum, country) => 
      sum + country.participations.reduce((countrySum, participation) => countrySum + participation.medalsCount, 0), 0
    );

    const totalCountries = countries.length;

    const uniqueYears = new Set<number>();
    countries.forEach((country) => 
      country.participations.forEach((participation) => uniqueYears.add(participation.year))
    );

    return { totalMedals, totalCountries, totalJOs: uniqueYears.size };
  }

  /**
   * Pr√©pare les donn√©es pour afficher un graphique des m√©dailles d'un pays donn√©.
   * 
   * @param countryData - Donn√©es du pays.
   * @returns Un objet contenant `labels` (ann√©es), `datasets` (m√©dailles) et `options` (config graphique).
   */
  prepareCountryChartData(countryData: Country): { labels: string[], datasets: any[], options: any } {
    if (!countryData || !countryData.participations) {
      console.error("Donn√©es invalides pour g√©n√©rer le graphique.");
      return { labels: [], datasets: [], options: {} };
    }

    const years = countryData.participations.map((p) => p.year.toString());
    const medals = countryData.participations.map((p) => p.medalsCount);

    return {
      labels: years,
      datasets: [
        {
          label: `Medals of ${countryData.country}`,
          data: medals,
          borderColor: '#42A5F5',
          backgroundColor: 'rgba(66, 165, 245, 0.2)',
          fill: true,
        },
      ],
      options: {
        responsive: true,
        scales: {
          x: { type: 'category', title: { display: true, text: 'Dates' } },
          y: { beginAtZero: true, title: { display: false, text: 'Medals' } },
        },
        plugins: { legend: { display: false } },
      },
    };
  }

  /**
   * Cr√©e un graphique √† partir des donn√©es fournies.
   * 
   * @param canvas - √âl√©ment HTML `<canvas>` pour dessiner le graphique.
   * @param chartData - Donn√©es format√©es pour le graphique.
   * @returns Une instance de `Chart.js` pour l'affichage des donn√©es.
   */
  createChart(canvas: HTMLCanvasElement, chartData: { labels: string[], datasets: any[], options: any }): Chart {
    return new Chart(canvas, {
      type: 'line',
      data: chartData,
      options: chartData.options,
    });
  }
}
